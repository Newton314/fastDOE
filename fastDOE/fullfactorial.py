# AUTOGENERATED! DO NOT EDIT! File to edit: 02_fullfactorial.ipynb (unless otherwise specified).

__all__ = ['fullfactorial', 'fullfactorial2k']

# Cell
import numpy as np

# Cell

def _generate_levels(factorlvls: list) -> list:
    """Generates a list of the levels from
    the given list with numbers of levels for each factor.

    [2, 3, 2] -> [[0, 1], [0, 1, 2], [0, 1]]

    Args:
        factorlvls (list): list with the number of levels for each factor

    Returns:
        list: list with the levels for each factor
    """
    levels = []
    for rnge in factorlvls:
        assert(type(rnge) == int)
        levels.append(list(range(rnge)))
    return levels

# Cell

def _build_ff_column(factor:int, nr_levels: list, levels: list) -> list:
    """Builds the experimental column for the given factor.

    Args:
        col (int): the column to build
        nr_levels (list): number of levels per factor e.g. [2, 3, 4]
        levels (list): level for each factor e.g. [[0, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4]]

    Returns:
        list: column of the experimental design matrix for the given factor
    """
    lvls = [1, 1] + nr_levels
    n = np.array(nr_levels).prod()
    reps = lvls[factor] * lvls[factor +1]
    unit = []
    for i in levels[factor]:
        unit.extend([i] * reps)
    column = unit * int(n / len(unit))
    return column



# Cell
def fullfactorial(factorlvls: list, levels: list = []) -> np.ndarray:
    levels = _generate_levels(factorlvls) if not levels else levels
    matrix = []
    for i, lvl in enumerate(factorlvls):
        matrix.append(_build_ff_column(i, factorlvls, levels))
    matrix = np.array(matrix)
    return matrix.T


# Cell
def fullfactorial2k(k: int) -> np.ndarray:
    """
    Creates a full factorial design with 2 levels per factor
    in standard order

    if you have 5 or more factors consider screening designs
    to reduce the number of factors

    k: number of factors

    Return
    """
    nr_lvls = [2] * k
    levels = [[-1, 1] for _ in range(k)]
    return fullfactorial(nr_lvls, levels)
